import type { FunctionNamesOf } from "./typings/basic.js";
/**
 * Basic APIs with Zotero 6 & newer (7) compatibility.
 * See also https://www.zotero.org/support/dev/zotero_7_for_developers
 */
export declare class BasicTool {
    /**
     * configurations.
     */
    protected _basicOptions: BasicOptions;
    protected _console?: Console;
    /**
     * @deprecated Use `patcherManager` instead.
     */
    protected readonly patchSign: string;
    static _version: string;
    /**
     * Get version - checks subclass first, then falls back to parent
     */
    get _version(): string;
    get basicOptions(): BasicOptions;
    /**
     *
     * @param data Pass an BasicTool instance to copy its options.
     */
    constructor(data?: BasicTool | BasicOptions);
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "Zotero" | "zotero"): _ZoteroTypes.Zotero;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "ZoteroPane" | "ZoteroPane_Local"): _ZoteroTypes.ZoteroPane;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "Zotero_Tabs"): _ZoteroTypes.Zotero_Tabs;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "Zotero_File_Interface"): any;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "Zotero_File_Exporter"): any;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "Zotero_LocateMenu"): any;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "Zotero_Report_Interface"): any;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "Zotero_Timeline_Interface"): any;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "Zotero_Tooltip"): any;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "ZoteroContextPane"): _ZoteroTypes.ZoteroContextPane;
    /**
     * @alpha
     * @param k
     */
    getGlobal(k: "ZoteroItemPane"): any;
    /**
     * @alpha
     * @param k
     */
    getGlobal<K extends keyof typeof globalThis, GLOBAL extends typeof globalThis>(k: K): GLOBAL[K];
    /**
     * Get global variables.
     * @param k Global variable name, `Zotero`, `ZoteroPane`, `window`, `document`, etc.
     */
    getGlobal(k: string): any;
    /**
     * If it's an XUL element
     * @param elem
     */
    isXULElement(elem: Element): boolean;
    /**
     * Create an XUL element
     *
     * For Zotero 6, use `createElementNS`;
     *
     * For Zotero 7+, use `createXULElement`.
     * @param doc
     * @param type
     * @example
     * Create a `<menuitem>`:
     * ```ts
     * const compat = new ZoteroCompat();
     * const doc = compat.getWindow().document;
     * const elem = compat.createXULElement(doc, "menuitem");
     * ```
     */
    createXULElement(doc: Document, type: string): XULElement;
    /**
     * Output to both Zotero.debug and console.log
     * @param data e.g. string, number, object, ...
     */
    log(...data: any): void;
    /**
     * Patch a function
     * @deprecated Use {@link PatchHelper} instead.
     * @param object The owner of the function
     * @param funcSign The signature of the function(function name)
     * @param ownerSign The signature of patch owner to avoid patching again
     * @param patcher The new wrapper of the patched function
     */
    patch<T, K extends FunctionNamesOf<T>>(object: T, funcSign: K, ownerSign: string, patcher: (fn: T[K]) => T[K]): void;
    /**
     * Add a Zotero event listener callback
     * @param type Event type
     * @param callback Event callback
     */
    addListenerCallback<T extends keyof ListenerCallbackMap>(type: T, callback: ListenerCallbackMap[T]): void;
    /**
     * Remove a Zotero event listener callback
     * @param type Event type
     * @param callback Event callback
     */
    removeListenerCallback<T extends keyof ListenerCallbackMap>(type: T, callback: ListenerCallbackMap[T]): void;
    /**
     * Remove all Zotero event listener callbacks when the last callback is removed.
     */
    protected _ensureRemoveListener(): void;
    /**
     * Ensure the main window listener is registered.
     */
    protected _ensureMainWindowListener(): void;
    /**
     * Ensure the plugin listener is registered.
     */
    protected _ensurePluginListener(): void;
    updateOptions(source?: BasicTool | BasicOptions): this;
    static getZotero(): _ZoteroTypes.Zotero;
}
export interface BasicOptions {
    log: {
        readonly _type: "toolkitlog";
        disableConsole: boolean;
        disableZLog: boolean;
        prefix: string;
    };
    debug: {
        disableDebugBridgePassword: boolean;
        password: string;
    };
    _debug?: BasicOptions["debug"];
    api: {
        pluginID: string;
    };
    listeners: {
        _mainWindow?: any;
        _plugin?: _ZoteroTypes.Plugins.observer;
        callbacks: {
            [K in keyof ListenerCallbackMap]: Set<ListenerCallbackMap[K]>;
        };
    };
}
export declare abstract class ManagerTool extends BasicTool {
    abstract register(...data: any[]): any;
    abstract unregister(...data: any[]): any;
    /**
     * Unregister everything
     */
    abstract unregisterAll(): any;
    protected _ensureAutoUnregisterAll(): void;
}
export declare function unregister(tools: {
    [key: string | number]: any;
}): void;
export declare function makeHelperTool<T extends typeof HelperTool>(cls: T, options: BasicTool | BasicOptions): T;
export declare function makeHelperTool<T>(cls: T, options: BasicTool | BasicOptions): T;
export declare function _importESModule(path: string): any;
declare interface ListenerCallbackMap {
    onMainWindowLoad: (win: Window) => void;
    onMainWindowUnload: (win: Window) => void;
    onPluginUnload: (...args: Parameters<NonNullable<_ZoteroTypes.Plugins.observer["shutdown"]>>) => void;
}
declare class HelperTool {
    constructor(...args: any);
    updateOptions: BasicTool["updateOptions"];
}
export {};
//# sourceMappingURL=basic.d.ts.map