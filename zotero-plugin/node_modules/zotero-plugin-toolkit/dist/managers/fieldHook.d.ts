import type { BasicOptions, BasicTool } from "../basic.js";
import { ManagerTool } from "../basic.js";
/**
 * Item field hooks manager.
 */
export declare class FieldHookManager extends ManagerTool {
    private data;
    private patchHelpers;
    constructor(base?: BasicTool | BasicOptions);
    /**
     * Register `Zotero.Item.getField` hook.
     * @param type
     * @param field
     * @param hook ( field: string, unformatted: boolean, includeBaseMapped: boolean, item: Zotero.Item, original: Function) => string
     */
    register(type: "getField", field: string, hook: typeof getFieldHookFunc): void;
    /**
     * Register `Zotero.Item.setField` hook.
     * @param type
     * @param field
     * @param hook ( field: string, value: string, loadIn: boolean, item: Zotero.Item, original: Function) => void
     */
    register(type: "setField", field: string, hook: typeof setFieldHookFunc): void;
    /**
     * Register `Zotero.ItemFields.isFieldOfBase` hook. Used in itemBox.
     * @param type
     * @param field
     * @param hook ( field: string, baseField: string, original: Function) => void
     */
    register(type: "isFieldOfBase", field: string, hook: typeof isFieldOfBaseHookFunc): void;
    unregister(type: "getField" | "setField" | "isFieldOfBase", field: string): void;
    unregisterAll(): void;
}
export declare function getFieldHookFunc(field: string, unformatted: boolean, includeBaseMapped: boolean, item: Zotero.Item, original: Function): string;
export declare function setFieldHookFunc(field: string, value: string, loadIn: boolean, item: Zotero.Item, original: Function): boolean;
export declare function isFieldOfBaseHookFunc(field: string, baseField: string | number, original: Function): boolean;
//# sourceMappingURL=fieldHook.d.ts.map