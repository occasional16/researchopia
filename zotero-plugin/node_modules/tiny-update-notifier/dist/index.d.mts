import { Difference } from "semiff";

//#region src/types.d.ts
interface Pkg {
  /** Name of the package. */
  name: string;
  /** Package version. */
  version: string;
}
interface Options {
  pkg: Pkg;
  /**
   * How often to check for updates (milliseconds).\
   * Default: 1 day
   */
  checkInterval?: number;
  /**
   * Which dist-tag to use.
   * @default 'latest'
   */
  distTag?: string;
  /**
   * Should cache be used.
   * @default true
   */
  cache?: boolean;
  /**
   * Request timeout (milliseconds).
   * @default 30000
   */
  timeout?: number;
}
interface Update {
  name: Pkg['name'];
  /** Latest version. */
  latest: string;
  /** Current version. */
  current: string;
  /** Version difference. */
  readonly type: Difference;
} //#endregion
//#region src/updateNotifier.d.ts

/**
 * Check if an update is available.
 * @param {Options} options Arguments
 * @returns {Update | false}
 * @async
 *
 * @example
 * ```ts
 * import updateNotifier from 'tiny-update-notifier';
 * import packageJson from './package.json' assert { type: 'json' };
 *
 * try {
 *     const update = await updateNotifier({ pkg: packageJson });
 *
 *     if (update) {
 *         console.log(`New version of ${update.name} available!`);
 *         console.log(`Update: ${update.current} → ${update.latest} (${update.type})`);
 *     }
 * } catch {
 *     console.log('Couldn\'t get the latest version.');
 * }
 * ```
 *
 * Output if a newer version is available:
 * ```md
 * New version of test available!
 * Update: 1.0.0 → 3.3.0 (major)
 * ```
 */
declare function updateNotifier(options: Options): Promise<Update | false>;

//#endregion
export { Options, Pkg, Update, updateNotifier as default };