import { BasicTool } from "../basic.js";
/**
 * Helper class for storing large amounts of data in Zotero preferences.
 *
 * @remarks
 * The allowed data length for a single preference is at least 100k,
 * but if this can grow infinitely, like an Array or an Object,
 * there will be significant performance problems.
 *
 * This class stores the keys of data in a single preference as a JSON string of Array,
 * and stores the values of data in separate preferences.
 *
 * You can either use the class as a normal object with `asObject()`,
 * or use the methods to access the data.
 */
export declare class LargePrefHelper extends BasicTool {
    private keyPref;
    private valuePrefPrefix;
    private innerObj;
    private hooks;
    /**
     *
     * @param keyPref The preference name for storing the keys of the data.
     * @param valuePrefPrefix The preference name prefix for storing the values of the data.
     * @param hooks Hooks for parsing the values of the data.
     * - `afterGetValue`: A function that takes the value of the data as input and returns the parsed value.
     * - `beforeSetValue`: A function that takes the key and value of the data as input and returns the parsed key and value.
     * If `hooks` is `"default"`, no parsing will be done.
     * If `hooks` is `"parser"`, the values will be parsed as JSON.
     * If `hooks` is an object, the values will be parsed by the hooks.
     */
    constructor(keyPref: string, valuePrefPrefix: string, hooks?: Partial<typeof defaultHooks> | "default" | "parser");
    /**
     * Get the object that stores the data.
     * @returns The object that stores the data.
     */
    asObject(): ProxyObj;
    /**
     * Get the Map that stores the data.
     * @returns The Map that stores the data.
     */
    asMapLike(): Map<string, any>;
    /**
     * Get the keys of the data.
     * @returns The keys of the data.
     */
    getKeys(): string[];
    /**
     * Set the keys of the data.
     * @param keys The keys of the data.
     */
    setKeys(keys: string[]): void;
    /**
     * Get the value of a key.
     * @param key The key of the data.
     * @returns The value of the key.
     */
    getValue(key: string): any;
    /**
     * Set the value of a key.
     * @param key The key of the data.
     * @param value The value of the key.
     */
    setValue(key: string, value: any): void;
    /**
     * Check if a key exists.
     * @param key The key of the data.
     * @returns Whether the key exists.
     */
    hasKey(key: string): boolean;
    /**
     * Add a key.
     * @param key The key of the data.
     */
    setKey(key: string): void;
    /**
     * Delete a key.
     * @param key The key of the data.
     */
    deleteKey(key: string): boolean;
    private constructTempObj;
    private constructTempMap;
}
type ProxyObj = Record<string | number, string | number | boolean>;
declare const defaultHooks: {
    afterGetValue: ({ value }: {
        value: string;
    }) => {
        value: any;
    };
    beforeSetValue: ({ key, value }: {
        key: string;
        value: any;
    }) => {
        key: string;
        value: any;
    };
};
export {};
//# sourceMappingURL=largePref.d.ts.map