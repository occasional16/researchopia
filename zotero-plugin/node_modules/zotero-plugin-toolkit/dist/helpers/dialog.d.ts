import type { TagElementProps } from "../tools/ui.js";
import { UITool } from "../tools/ui.js";
/**
 * Dialog window helper. A superset of XUL dialog.
 */
export declare class DialogHelper extends UITool {
    /**
     * Passed to dialog window for data-binding and lifecycle controls. See {@link DialogHelper.setDialogData}
     */
    dialogData: DialogData;
    /**
     * Dialog window instance
     */
    window: Window;
    private elementProps;
    /**
     * Create a dialog helper with row \* column grids.
     * @param row
     * @param column
     */
    constructor(row: number, column: number);
    /**
     * Add a cell at (row, column). Index starts from 0.
     * @param row
     * @param column
     * @param elementProps Cell element props. See {@link ElementProps}
     * @param cellFlex If the cell is flex. Default true.
     */
    addCell(row: number, column: number, elementProps: TagElementProps, cellFlex?: boolean): this;
    /**
     * Add a control button to the bottom of the dialog.
     * @param label Button label
     * @param id Button id.
     * The corresponding id of the last button user clicks before window exit will be set to `dialogData._lastButtonId`.
     * @param options Options
     * @param [options.noClose] Don't close window when clicking this button.
     * @param [options.callback] Callback of button click event.
     */
    addButton(label: string, id?: string, options?: {
        noClose?: boolean;
        callback?: (ev: Event) => any;
    }): this;
    /**
     * Dialog data.
     * @remarks
     * This object is passed to the dialog window.
     *
     * The control button id is in `dialogData._lastButtonId`;
     *
     * The data-binding values are in `dialogData`.
     * ```ts
     * interface DialogData {
     *   [key: string | number | symbol]: any;
     *   loadLock?: { promise: Promise<void>; resolve: () => void; isResolved: () => boolean }; // resolve after window load (auto-generated)
     *   loadCallback?: Function; // called after window load
     *   unloadLock?: { promise: Promise<void>; resolve: () => void }; // resolve after window unload (auto-generated)
     *   unloadCallback?: Function; // called after window unload
     *   beforeUnloadCallback?: Function; // called before window unload when elements are accessable.
     * }
     * ```
     * @param dialogData
     */
    setDialogData(dialogData: DialogData): this;
    /**
     * Open the dialog
     * @param title Window title
     * @param windowFeatures
     * @param windowFeatures.width Ignored if fitContent is `true`.
     * @param windowFeatures.height Ignored if fitContent is `true`.
     * @param windowFeatures.left
     * @param windowFeatures.top
     * @param windowFeatures.centerscreen Open window at the center of screen.
     * @param windowFeatures.resizable If window is resizable.
     * @param windowFeatures.fitContent Resize the window to content size after elements are loaded.
     * @param windowFeatures.noDialogMode Dialog mode window only has a close button. Set `true` to make maximize and minimize button visible.
     * @param windowFeatures.alwaysRaised Is the window always at the top.
     */
    open(title: string, windowFeatures?: {
        width?: number;
        height?: number;
        left?: number;
        top?: number;
        centerscreen?: boolean;
        resizable?: boolean;
        fitContent?: boolean;
        noDialogMode?: boolean;
        alwaysRaised?: boolean;
    }): this;
}
interface DialogData {
    [key: string | number | symbol]: any;
    loadLock?: {
        promise: Promise<void>;
        resolve: () => void;
        isResolved: () => boolean;
    };
    loadCallback?: () => void;
    unloadLock?: {
        promise: Promise<void>;
        resolve: () => void;
    };
    unloadCallback?: () => void;
    beforeUnloadCallback?: () => void;
    l10nFiles?: string | string[];
}
export {};
//# sourceMappingURL=dialog.d.ts.map