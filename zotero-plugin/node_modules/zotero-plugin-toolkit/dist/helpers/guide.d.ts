import { BasicTool } from "../basic.js";
/**
 * Helper for creating a guide.
 * Designed for creating a step-by-step guide for users.
 * @alpha
 */
export declare class GuideHelper extends BasicTool {
    _steps: GuideStep[];
    constructor();
    addStep(step: GuideStep): this;
    addSteps(steps: GuideStep[]): this;
    show(doc: Document): Promise<Guide>;
    highlight(doc: Document, step: GuideStep): Promise<Guide>;
}
interface GuideStep {
    element?: string | Element | (() => Element);
    title?: string;
    description?: string;
    position?: "before_start" | "before_end" | "after_start" | "after_end" | "start_before" | "start_after" | "end_before" | "end_after" | "overlap" | "after_pointer" | "center";
    showButtons?: ("next" | "prev" | "close")[];
    showProgress?: boolean;
    disableButtons?: ("next" | "prev" | "close")[];
    progressText?: string;
    closeBtnText?: string;
    nextBtnText?: string;
    prevBtnText?: string;
    onBeforeRender?: GuideHook;
    onRender?: GuideHook;
    onExit?: GuideHook;
    onNextClick?: GuideHook;
    onPrevClick?: GuideHook;
    onCloseClick?: GuideHook;
    onMask?: (props: {
        mask: (elem: Element) => void;
    }) => void;
}
type GuideHook = ({ config, state, }: {
    config: GuideStep;
    state: GuideState;
}) => any;
interface GuideState {
    step: number;
    steps: GuideStep[];
    controller: Guide;
}
declare class Guide {
    _window: Window;
    _id: string;
    _panel: XULPopupElement;
    _header: HTMLDivElement;
    _body: HTMLDivElement;
    _footer: HTMLDivElement;
    _progress: HTMLDivElement;
    _closeButton: XUL.Button;
    _prevButton: XUL.Button;
    _nextButton: XUL.Button;
    _steps?: GuideStep[];
    _noClose: boolean;
    _closed: boolean;
    _autoNext: boolean;
    _currentIndex: number;
    initialized: boolean;
    _cachedMasks: WeakRef<HTMLElement | SVGElement>[];
    get content(): any;
    get currentStep(): GuideStep | undefined;
    get currentTarget(): Element | undefined;
    get hasNext(): boolean | undefined;
    get hasPrevious(): boolean | undefined;
    get hookProps(): Parameters<GuideHook>[0];
    get panel(): XULPopupElement;
    constructor(win: Window);
    show(steps?: GuideStep[]): Promise<void>;
    hide(): void;
    abort(): void;
    moveTo(stepIndex: number): void;
    moveNext(): void;
    movePrevious(): void;
    _handleShown(): void;
    _handleHidden(): Promise<void>;
    _centerPanel: () => void;
    _createMask(targetElement?: Element): void;
    _removeMask(): void;
}
export {};
//# sourceMappingURL=guide.d.ts.map