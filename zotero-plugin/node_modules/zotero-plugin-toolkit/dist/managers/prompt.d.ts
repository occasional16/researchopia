import type { BasicOptions } from "../basic.js";
import type { GlobalInstance } from "./toolkitGlobal.js";
import { BasicTool, ManagerTool } from "../basic.js";
/**
 * Prompt for setting up or executing some commands quickly.
 *
 * `Shift + P` can show/hide its UI anywhere after registering commands.
 */
export declare class Prompt {
    private ui;
    private base;
    get document(): Document;
    /**
     * Record the last text entered
     */
    private lastInputText;
    /**
     * Default text
     */
    private defaultText;
    /**
     * It controls the max line number of commands displayed in `commandsNode`.
     */
    private maxLineNum;
    /**
     * It controls the max number of suggestions.
     */
    private maxSuggestionNum;
    /**
     * The top-level HTML div node of `Prompt`
     */
    promptNode: HTMLDivElement;
    /**
     * The HTML input node of `Prompt`.
     */
    inputNode: HTMLInputElement;
    /**
     * Save all commands registered by all addons.
     */
    commands: Command[];
    /**
     * Initialize `Prompt` but do not create UI.
     */
    constructor();
    /**
     * Initialize `Prompt` UI and then bind events on it.
     */
    initializeUI(): void;
    private createHTML;
    /**
     * Show commands in a new `commandsContainer`
     * All other `commandsContainer` is hidden
     * @param commands Command[]
     * @param clear remove all `commandsContainer` if true
     */
    showCommands(commands: Command[], clear?: boolean): void;
    /**
     * Create a `commandsContainer` div element, append to `commandsContainer` and hide others.
     * @returns commandsNode
     */
    createCommandsContainer(): HTMLDivElement;
    /**
     * Return current displayed `commandsContainer`
     * @returns
     */
    private getCommandsContainer;
    /**
     * Create a command item for `Prompt` UI.
     * @param command
     * @returns
     */
    createCommandNode(command: Command): HTMLElement;
    /**
     * Called when `enter` key is pressed.
     */
    private trigger;
    /**
     * Called when `escape` key is pressed.
     */
    private exit;
    private execCallback;
    /**
     * Match suggestions for user's entered text.
     */
    private showSuggestions;
    /**
     * Bind events of pressing `keydown` and `keyup` key.
     */
    private initInputEvents;
    /**
     * Create a commandsContainer and display a text
     */
    showTip(text: string): HTMLDivElement;
    /**
     * Mark the selected item with class `selected`.
     * @param item HTMLDivElement
     */
    selectItem(item: HTMLDivElement): void;
    private addStyle;
    private registerShortcut;
}
export declare class PromptManager extends ManagerTool {
    prompt: Prompt;
    /**
     * Save the commands registered from this manager
     */
    private commands;
    constructor(base?: BasicTool | BasicOptions);
    /**
     * Register commands. Don't forget to call `unregister` on plugin exit.
     * @param commands Command[]
     * @example
     * ```ts
     * let getReader = () => {
     *   return BasicTool.getZotero().Reader.getByTabID(
     *     (Zotero.getMainWindow().Zotero_Tabs).selectedID
     *   )
     * }
     *
     * register([
     *   {
     *     name: "Split Horizontally",
     *     label: "Zotero",
     *     when: () => getReader() as boolean,
     *     callback: (prompt: Prompt) => getReader().menuCmd("splitHorizontally")
     *   },
     *   {
     *     name: "Split Vertically",
     *     label: "Zotero",
     *     when: () => getReader() as boolean,
     *     callback: (prompt: Prompt) => getReader().menuCmd("splitVertically")
     *   }
     * ])
     * ```
     */
    register(commands: {
        name?: string;
        label?: string;
        id?: string;
        when?: () => boolean;
        callback: ((prompt: Prompt) => Promise<void>) | ((prompt: Prompt) => void) | Command[];
    }[]): void;
    /**
     * You can delete a command registed before by its name.
     * @remarks
     * There is a premise here that the names of all commands registered by a single plugin are not duplicated.
     * @param id Command.name
     */
    unregister(id: string): void;
    /**
     * Call `unregisterAll` on plugin exit.
     */
    unregisterAll(): void;
}
export interface Command {
    name?: string;
    label?: string;
    id?: string;
    when?: () => boolean;
    callback: ((prompt: Prompt) => Promise<void>) | ((prompt: Prompt) => void) | Command[];
}
export interface PromptGlobal extends GlobalInstance {
    instance: Prompt | undefined;
}
//# sourceMappingURL=prompt.d.ts.map