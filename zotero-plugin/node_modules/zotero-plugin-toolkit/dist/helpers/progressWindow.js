import { BasicTool } from "../basic.js";
/**
 * Icon dict. Add your custom icons here.
 * @default
 * ```ts
 * {
 *   success: "chrome://zotero/skin/tick.png",
 *   fail: "chrome://zotero/skin/cross.png",
 * };
 * ```
 */
const icons = {
    success: "chrome://zotero/skin/tick.png",
    fail: "chrome://zotero/skin/cross.png",
};
/**
 * ProgressWindow helper.
 * @example
 * Show a popup with success icon
 * ```ts
 * const tool = new ZoteroTool();
 * tool.createProgressWindow("Addon").createLine({
 *   type: "success",
 *   text: "Finish"
 *   progress: 100,
 * }).show();
 * ```
 * @example
 * Show a popup and change line content
 * ```ts
 * const compat = new ZoteroCompat();
 * const tool = new ZoteroTool();
 * const popupWin = tool.createProgressWindow("Addon").createLine({
 *   text: "Loading"
 *   progress: 50,
 * }).show(-1);
 * // Do operations
 * compat.getGlobal("setTimeout")(()=>{
 *   popupWin.changeLine({
 *     text: "Finish",
 *     progress: 100,
 *   });
 * }, 3000);
 * ```
 */
export class ProgressWindowHelper {
    win;
    lines;
    closeTime;
    /**
     *
     * @param header window header
     * @param options
     * @param options.window
     * @param options.closeOnClick
     * @param options.closeTime
     * @param options.closeOtherProgressWindows
     */
    constructor(header, options = {
        closeOnClick: true,
        closeTime: 5000,
    }) {
        this.win = new (BasicTool.getZotero().ProgressWindow)(options);
        this.lines = [];
        this.closeTime = options.closeTime || 5000;
        this.win.changeHeadline(header);
        if (options.closeOtherProgressWindows) {
            BasicTool.getZotero().ProgressWindowSet.closeAll();
        }
    }
    /**
     * Create a new line
     * @param options
     * @param options.type
     * @param options.icon
     * @param options.text
     * @param options.progress
     * @param options.idx
     */
    createLine(options) {
        const icon = this.getIcon(options.type, options.icon);
        const line = new this.win.ItemProgress(icon || "", options.text || "");
        if (typeof options.progress === "number") {
            line.setProgress(options.progress);
        }
        this.lines.push(line);
        this.updateIcons();
        return this;
    }
    /**
     * Change the line content
     * @param options
     * @param options.type
     * @param options.icon
     * @param options.text
     * @param options.progress
     * @param options.idx
     */
    changeLine(options) {
        if (this.lines?.length === 0) {
            return this;
        }
        const idx = typeof options.idx !== "undefined" &&
            options.idx >= 0 &&
            options.idx < this.lines.length
            ? options.idx
            : 0;
        const icon = this.getIcon(options.type, options.icon);
        if (icon) {
            // @ts-expect-error setItemTypeAndIcon is new func not included in types
            this.lines[idx].setItemTypeAndIcon(icon);
        }
        options.text && this.lines[idx].setText(options.text);
        typeof options.progress === "number" &&
            this.lines[idx].setProgress(options.progress);
        this.updateIcons();
        return this;
    }
    show(closeTime = undefined) {
        this.win.show();
        typeof closeTime !== "undefined" && (this.closeTime = closeTime);
        if (this.closeTime && this.closeTime > 0) {
            this.win.startCloseTimer(this.closeTime);
        }
        setTimeout(this.updateIcons.bind(this), 50);
        return this;
    }
    /**
     * Set custom icon uri for progress window
     * @param key
     * @param uri
     */
    static setIconURI(key, uri) {
        icons[key] = uri;
    }
    getIcon(type, defaultIcon) {
        return type && type in icons ? icons[type] : defaultIcon;
    }
    updateIcons() {
        try {
            this.lines.forEach((line) => {
                const box = line._image;
                const icon = box.dataset.itemType;
                if (icon && !box.style.backgroundImage.includes("progress_arcs")) {
                    box.style.backgroundImage = `url(${box.dataset.itemType})`;
                }
            });
        }
        catch {
            // Ignore
        }
    }
    changeHeadline(text, icon, postText) {
        this.win.changeHeadline(text, icon, postText);
        return this;
    }
    addLines(labels, icons) {
        this.win.addLines(labels, icons);
        return this;
    }
    addDescription(text) {
        this.win.addDescription(text);
        return this;
    }
    startCloseTimer(ms, requireMouseOver) {
        this.win.startCloseTimer(ms, requireMouseOver);
        return this;
    }
    close() {
        this.win.close();
        return this;
    }
}
//# sourceMappingURL=progressWindow.js.map