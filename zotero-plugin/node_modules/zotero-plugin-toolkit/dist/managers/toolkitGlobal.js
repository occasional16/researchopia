import { BasicTool } from "../basic.js";
import { DebugBridge } from "../utils/debugBridge.js";
import { PluginBridge } from "../utils/pluginBridge.js";
/**
 * The Singleton class of global parameters used by managers.
 * @example `ToolkitGlobal.getInstance().itemTree.state`
 */
export class ToolkitGlobal {
    debugBridge;
    pluginBridge;
    prompt;
    currentWindow;
    constructor() {
        initializeModules(this);
        this.currentWindow = BasicTool.getZotero().getMainWindow();
    }
    /**
     * Get the global unique instance of `class ToolkitGlobal`.
     * @returns An instance of `ToolkitGlobal`.
     */
    static getInstance() {
        let _Zotero;
        try {
            if (typeof Zotero !== "undefined") {
                _Zotero = Zotero;
            }
            else {
                _Zotero = BasicTool.getZotero();
            }
        }
        catch { }
        if (!_Zotero) {
            return undefined;
        }
        let requireInit = false;
        if (!("_toolkitGlobal" in _Zotero)) {
            // eslint-disable-next-line ts/ban-ts-comment
            // @ts-ignore - add global property
            _Zotero._toolkitGlobal = new ToolkitGlobal();
            requireInit = true;
        }
        // eslint-disable-next-line ts/ban-ts-comment
        // @ts-ignore - add global property
        const currentGlobal = _Zotero._toolkitGlobal;
        if (currentGlobal.currentWindow !== _Zotero.getMainWindow()) {
            checkWindowDependentModules(currentGlobal);
            requireInit = true;
        }
        if (requireInit) {
            initializeModules(currentGlobal);
        }
        return currentGlobal;
    }
}
/**
 * Initialize global modules using the data of this toolkit build.
 * Modules and their properties that do not exist will be updated.
 * @param instance ToolkitGlobal instance
 */
function initializeModules(instance) {
    new BasicTool().log("Initializing ToolkitGlobal modules");
    setModule(instance, "prompt", {
        _ready: false,
        instance: undefined,
    });
    DebugBridge.setModule(instance);
    PluginBridge.setModule(instance);
}
function setModule(instance, key, module) {
    if (!module) {
        return;
    }
    if (!instance[key]) {
        instance[key] = module;
    }
    for (const moduleKey in module) {
        instance[key][moduleKey] ??= module[moduleKey];
    }
}
function checkWindowDependentModules(instance) {
    instance.currentWindow = BasicTool.getZotero().getMainWindow();
    instance.prompt = undefined;
}
export default ToolkitGlobal;
//# sourceMappingURL=toolkitGlobal.js.map