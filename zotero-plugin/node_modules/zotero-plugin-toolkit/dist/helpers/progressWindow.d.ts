/**
 * ProgressWindow helper.
 * @example
 * Show a popup with success icon
 * ```ts
 * const tool = new ZoteroTool();
 * tool.createProgressWindow("Addon").createLine({
 *   type: "success",
 *   text: "Finish"
 *   progress: 100,
 * }).show();
 * ```
 * @example
 * Show a popup and change line content
 * ```ts
 * const compat = new ZoteroCompat();
 * const tool = new ZoteroTool();
 * const popupWin = tool.createProgressWindow("Addon").createLine({
 *   text: "Loading"
 *   progress: 50,
 * }).show(-1);
 * // Do operations
 * compat.getGlobal("setTimeout")(()=>{
 *   popupWin.changeLine({
 *     text: "Finish",
 *     progress: 100,
 *   });
 * }, 3000);
 * ```
 */
export declare class ProgressWindowHelper {
    win: Zotero.ProgressWindow;
    private lines;
    private closeTime;
    /**
     *
     * @param header window header
     * @param options
     * @param options.window
     * @param options.closeOnClick
     * @param options.closeTime
     * @param options.closeOtherProgressWindows
     */
    constructor(header: string, options?: {
        window?: Window;
        closeOnClick?: boolean;
        closeTime?: number;
        closeOtherProgressWindows?: boolean;
    });
    /**
     * Create a new line
     * @param options
     * @param options.type
     * @param options.icon
     * @param options.text
     * @param options.progress
     * @param options.idx
     */
    createLine(options: {
        type?: string;
        icon?: string;
        text?: string;
        progress?: number;
        idx?: number;
    }): this;
    /**
     * Change the line content
     * @param options
     * @param options.type
     * @param options.icon
     * @param options.text
     * @param options.progress
     * @param options.idx
     */
    changeLine(options: {
        type?: string;
        icon?: string;
        text?: string;
        progress?: number;
        idx?: number;
    }): this;
    show(closeTime?: number | undefined): this;
    /**
     * Set custom icon uri for progress window
     * @param key
     * @param uri
     */
    static setIconURI(key: string, uri: string): void;
    private getIcon;
    private updateIcons;
    changeHeadline(text: string, icon?: string, postText?: string): this;
    addLines(labels: string | {
        [key: string | number | symbol]: string;
    }, icons: string | {
        [key: string | number | symbol]: string;
    }): this;
    addDescription(text: string): this;
    startCloseTimer(ms: number, requireMouseOver?: boolean): this;
    close(): this;
}
//# sourceMappingURL=progressWindow.d.ts.map