import pluginIgnore from "eslint-config-flat-gitignore";
import eslintJs from "@eslint/js";
import pluginChaiFriendly from "eslint-plugin-chai-friendly";
import mochaPlugin from "eslint-plugin-mocha";
import tseslint from "typescript-eslint";

//#region src/globs.ts
const GLOB_SRC_EXT = "?([cm])[jt]s?(x)";
const GLOB_TS = "**/*.?([cm])ts";
const GLOB_TSX = "**/*.tsx";
const GLOB_DTS = "**/*.d.ts";
const GLOB_TESTS = [
	`**/__tests__/**/*.${GLOB_SRC_EXT}`,
	`**/*.spec.${GLOB_SRC_EXT}`,
	`**/*.test.${GLOB_SRC_EXT}`,
	`**/*.bench.${GLOB_SRC_EXT}`,
	`**/*.benchmark.${GLOB_SRC_EXT}`
];
const GLOB_NODE_MODULES = "**/node_modules";
const GLOB_DIST = "**/dist";
const GLOB_LOCKFILE = [
	"**/package-lock.json",
	"**/yarn.lock",
	"**/pnpm-lock.yaml",
	"**/bun.lockb"
];
const GLOB_EXCLUDE = [
	GLOB_NODE_MODULES,
	GLOB_DIST,
	...GLOB_LOCKFILE,
	"**/output",
	"**/coverage",
	"**/temp",
	"**/fixtures",
	"**/.vitepress/cache",
	"**/.nuxt",
	"**/.vercel",
	"**/.changeset",
	"**/.idea",
	"**/.output",
	"**/.vite-inspect",
	"**/.nitro",
	"**/.scaffold",
	"**/CHANGELOG*.md",
	"**/*.min.*",
	"**/LICENSE*",
	"**/__snapshots__",
	"**/auto-import?(s).d.ts",
	"**/components.d.ts"
];

//#endregion
//#region src/configs/ignores.ts
const ignores = [{
	name: "zotero-plugin/global-ignores",
	ignores: [
		...GLOB_EXCLUDE,
		"**/build/**",
		"**/.scaffold/**",
		"**/prefs.d.ts",
		"**/i10n.d.ts"
	]
}, {
	...pluginIgnore({ strict: false }),
	name: "zotero-plugin/gitignore"
}];

//#endregion
//#region src/configs/javascript.ts
const javascript = [{
	...eslintJs.configs.recommended,
	name: "zotero-plugin/javascript"
}];

//#endregion
//#region src/configs/specialCases.ts
const specialCases = [{
	files: ["**/prefs.js"],
	name: "zotero-plugin/special/prefs",
	rules: { "no-undef": "off" }
}, {
	files: ["**/bootstrap.{js,ts}"],
	name: "zotero-plugin/special/bootstrap",
	rules: {
		"no-undef": "off",
		"no-unused-vars": "off",
		"unused-imports/no-unused-vars": "off"
	}
}];

//#endregion
//#region src/configs/test.ts
const mocha = [{
	files: GLOB_TESTS,
	...mochaPlugin.configs.recommended,
	name: "zotero-plugin/mocha"
}];
const chai = [{
	files: GLOB_TESTS,
	...pluginChaiFriendly.configs.recommendedFlat,
	name: "zotero-plugin/chai"
}];
const test = [...mocha, ...chai];

//#endregion
//#region src/configs/typescript.ts
const typescriptCore = tseslint.config({
	extends: [...tseslint.configs.recommended],
	files: [GLOB_TS, GLOB_TSX],
	name: "zotero-plugin/typescript",
	rules: {
		"@typescript-eslint/ban-ts-comment": ["error", {
			minimumDescriptionLength: 3,
			"ts-expect-error": "allow-with-description"
		}],
		"@typescript-eslint/no-explicit-any": "off",
		"@typescript-eslint/no-non-null-assertion": "off",
		"@typescript-eslint/no-unsafe-function-type": "off",
		"@typescript-eslint/no-unused-vars": ["error", {
			argsIgnorePattern: "^_",
			varsIgnorePattern: "^_"
		}]
	}
});
const typescript = [...typescriptCore, {
	files: [GLOB_DTS],
	name: "zotero-plugin/typescript/dts-rules",
	rules: {
		"eslint-comments/no-unlimited-disable": "off",
		"import/no-duplicates": "off",
		"no-restricted-syntax": "off",
		"unused-imports/no-unused-vars": "off"
	}
}];

//#endregion
//#region src/index.ts
function zotero(options = {}) {
	const config = [
		...ignores,
		...javascript,
		...typescript,
		...specialCases,
		...test
	];
	if (options.overrides) config.push(...Array.isArray(options.overrides) ? options.overrides : [options.overrides]);
	return config;
}

//#endregion
export { zotero as default, ignores, javascript, specialCases, test, typescript };