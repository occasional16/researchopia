import type { BasicOptions, BasicTool } from "../basic.js";
import { ManagerTool } from "../basic.js";
/**
 * Register a global keyboard event listener.
 */
export declare class KeyboardManager extends ManagerTool {
    private _keyboardCallbacks;
    private _cachedKey?;
    private id;
    constructor(base?: BasicTool | BasicOptions);
    /**
     * Register a keyboard event listener.
     * @param callback The callback function.
     */
    register(callback: KeyboardCallback): void;
    /**
     * Unregister a keyboard event listener.
     * @param callback The callback function.
     */
    unregister(callback: KeyboardCallback): void;
    /**
     * Unregister all keyboard event listeners.
     */
    unregisterAll(): void;
    private initKeyboardListener;
    private unInitKeyboardListener;
    private initReaderKeyboardListener;
    private addReaderKeyboardCallback;
    private _initKeyboardListener;
    private _unInitKeyboardListener;
    private triggerKeydown;
    private triggerKeyup;
    private dispatchCallback;
}
type KeyboardEventType = "keydown" | "keyup";
type KeyboardCallback = (event: KeyboardEvent, options: {
    keyboard?: KeyModifier;
    type: KeyboardEventType;
}) => void;
interface KeyModifierStatus {
    accel: boolean;
    shift: boolean;
    control: boolean;
    meta: boolean;
    alt: boolean;
    key: string;
}
/**
 * Class to represent key with modifiers
 */
export declare class KeyModifier implements KeyModifierStatus {
    accel: boolean;
    shift: boolean;
    control: boolean;
    meta: boolean;
    alt: boolean;
    key: string;
    useAccel: boolean;
    constructor(raw?: string | KeyboardEvent | KeyModifier, options?: {
        useAccel?: boolean;
    });
    /**
     * Merge another KeyModifier into this one.
     * @param newMod the new KeyModifier
     * @param options
     * @param options.allowOverwrite
     * @returns KeyModifier
     */
    merge(newMod: KeyModifier, options?: {
        allowOverwrite?: boolean;
    }): this;
    /**
     * Check if the current KeyModifier equals to another KeyModifier.
     * @param newMod the new KeyModifier
     * @returns true if equals
     */
    equals(newMod: KeyModifier | string): boolean;
    /**
     * Get the raw string representation of the KeyModifier.
     */
    getRaw(): string;
    /**
     * Get the localized string representation of the KeyModifier.
     */
    getLocalized(): string;
    /**
     * Get the un-localized string representation of the KeyModifier.
     */
    private unLocalized;
    private mergeAttribute;
}
export {};
//# sourceMappingURL=keyboard.d.ts.map