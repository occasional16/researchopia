import { BasicTool } from "../basic.js";
import ToolkitGlobal from "../managers/toolkitGlobal.js";
/**
 * Debug bridge.
 *
 * @deprecated Since this is a temporary solution for debugging, it is not recommended to use.
 * The zotero-plugin-scaffold no longer need this.
 *
 * @remarks
 * Global variables: Zotero, window(main window).
 *
 * @example
 * Run script directly. The `run` is URIencoded script.
 *
 * `zotero://ztoolkit-debug/?run=Zotero.getMainWindow().alert(%22HelloWorld!%22)&app=developer`
 * @example
 * Run script from file. The `file` is URIencoded path to js file starts with `file:///`
 *
 * `zotero://ztoolkit-debug/?file=file%3A%2F%2F%2FC%3A%2FUsers%2Fw_xia%2FDesktop%2Frun.js&app=developer`
 */
export class DebugBridge {
    static version = 2;
    static passwordPref = "extensions.zotero.debug-bridge.password";
    get version() {
        return DebugBridge.version;
    }
    _disableDebugBridgePassword;
    get disableDebugBridgePassword() {
        return this._disableDebugBridgePassword;
    }
    set disableDebugBridgePassword(value) {
        this._disableDebugBridgePassword = value;
    }
    get password() {
        return BasicTool.getZotero().Prefs.get(DebugBridge.passwordPref, true);
    }
    set password(v) {
        BasicTool.getZotero().Prefs.set(DebugBridge.passwordPref, v, true);
    }
    constructor() {
        this._disableDebugBridgePassword = false;
        this.initializeDebugBridge();
    }
    static setModule(instance) {
        if (!instance.debugBridge?.version ||
            instance.debugBridge.version < DebugBridge.version) {
            instance.debugBridge = new DebugBridge();
        }
    }
    initializeDebugBridge() {
        const debugBridgeExtension = {
            noContent: true,
            doAction: async (uri) => {
                const Zotero = BasicTool.getZotero();
                const window = Zotero.getMainWindow();
                const uriString = uri.spec.split("//").pop();
                if (!uriString) {
                    return;
                }
                const params = {};
                uriString
                    .split("?")
                    .pop()
                    ?.split("&")
                    .forEach((p) => {
                    params[p.split("=")[0]] = decodeURIComponent(p.split("=")[1]);
                });
                const skipPasswordCheck = ToolkitGlobal.getInstance()?.debugBridge.disableDebugBridgePassword;
                let allowed = false;
                if (skipPasswordCheck) {
                    allowed = true;
                }
                else {
                    // If password is not set, ask permission for commands without password.
                    if (typeof params.password === "undefined" &&
                        typeof this.password === "undefined") {
                        allowed = window.confirm(`External App ${params.app} wants to execute command without password.\nCommand:\n${(params.run ||
                            params.file ||
                            "").slice(0, 100)}\nIf you do not know what it is, please click Cancel to deny.`);
                    }
                    else {
                        allowed = this.password === params.password;
                    }
                }
                if (allowed) {
                    if (params.run) {
                        try {
                            const AsyncFunction = Object.getPrototypeOf(async () => { }).constructor;
                            const f = new AsyncFunction("Zotero,window", params.run);
                            await f(Zotero, window);
                        }
                        catch (e) {
                            Zotero.debug(e);
                            window.console.log(e);
                        }
                    }
                    if (params.file) {
                        try {
                            Services.scriptloader.loadSubScript(params.file, {
                                Zotero,
                                window,
                            });
                        }
                        catch (e) {
                            Zotero.debug(e);
                            window.console.log(e);
                        }
                    }
                }
            },
            newChannel(uri) {
                this.doAction(uri);
            },
        };
        // @ts-expect-error wrappedJSObject
        Services.io.getProtocolHandler("zotero").wrappedJSObject._extensions["zotero://ztoolkit-debug"] = debugBridgeExtension;
    }
}
//# sourceMappingURL=debugBridge.js.map